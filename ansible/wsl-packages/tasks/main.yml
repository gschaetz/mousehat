---
- include_vars:
    file: "{{ packages }}"
    name: packages_file

### START APT
# install dirmngr
- apt: 
    name: dirmngr
    state: present
  when: 
    - packages_file.snaps is defined and (ansible_os_family == 'Debian')
  become: true

# On apt-get target
- name: Add an apt key by id from a keyserver
  apt_key:
    keyserver: "{{ item.value.keyserver_url }}"
    id: "{{ item.value.keyserver_id }}"
  with_dict: "{{ packages_file.repositories | default({}) }}"  
  when: 
    - packages_file.repositories is defined and (ansible_os_family == 'Debian')
    - item.value.keyserver_url is defined
  become: true

# On apt-get url
- name: Add an Apt signing key by url
  apt_key:
    url: "{{ item.value.url }}"
    state: present  
  with_dict: "{{ packages_file.repositories | default({}) }}"  
  when: 
    - packages_file.repositories is defined and (ansible_os_family == 'Debian')
    - item.value.url is defined
  become: true

# On apt-get target
- name: add apt repos
  apt_repository: repo={{ item.value.repository_url }} state=present
  with_dict: "{{ packages_file.repositories | default({}) }}" 
  when: 
    - packages_file.repositories is defined and (ansible_os_family == 'Debian')
  become: true

# apt-get update
- name: apt-get update
  apt:
    update_cache: yes
  when: (ansible_os_family == 'Debian')
  become: true
  
# install packages
- name: install apt packages
  apt: 
    name: "{{ packages_file.packages.installed }}"
    state: present
  when: packages_file.packages.installed is defined and (ansible_os_family == 'Debian') 
  become: true

# remove packages
- name: remove apt packages
  apt: 
    name: "{{ packages_file.packages.uninstalled }}"
    state: absent
  when: packages_file.packages.uninstalled is defined and (ansible_os_family == 'Debian') 
  become: true
### END APT

### START PACMAN
# install packages
- name: install pacman packages
  pacman: 
    name: "{{ packages_file.packages.installed }}"
    state: present
  when: packages_file.packages.installed is defined and (ansible_os_family == 'Archl=inux') 
  become: true

# remove packages
- name: remove pacman packages
  pacman: 
    name: "{{ packages_file.packages.uninstalled }}"
    state: absent
  with_list: "{{ packages_file.packages.uninstalled  | default({}) }}"
  when: packages_file.packages.uninstalled is defined and (ansible_os_family == 'Archlinux') 
  become: true
### END PACMAN

# start snaps
# install snapd
- name: install snapd
  apt: 
    name: snapd
    state: present
  when: 
    - packages_file.snaps is defined and (ansible_os_family == 'Debian')
  become: true

- name: Make sure snapd service is running
  command: systemctl start snapd
  become: true

# install
- name: install snaps
  community.general.snap:
    name: "{{ item.name }}"
    state: present
    classic: "{{ item.classic }}"
  become: true
  with_list: "{{ packages_file.snaps.installed | default({}) }}" 
  when: 
    - packages_file.snaps is defined and (ansible_os_family == 'Debian')

# remove
- name: remove snaps
  community.general.snap:
    name: "{{ item.name }}"
    state: absent
    classic: "{{ item.classic }}"
  become: true
  with_list: "{{ packages_file.snaps.uninstalled | default({}) }}" 
  when: 
    - packages_file.snaps is defined and (ansible_os_family == 'Debian')
